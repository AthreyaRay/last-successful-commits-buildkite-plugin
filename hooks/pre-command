#!/bin/bash
set -euo pipefail

get_last_commit_from_buildkite() {
  local org="$1"
  local pipeline="$2"
  local branch="$3"
  local state="$4"
  local token="$5"

  local state_filter=""
  if [[ -n "$state" ]]; then
    state_filter="state: [$state],"
  else
    # Default: exclude RUNNING builds
    state_filter="state: [PASSED, FAILED, CANCELED, SCHEDULED, BLOCKED],"
  fi

  local query=$(cat <<EOF
{
  pipeline(slug: "$org/$pipeline") {
    builds(first: 1, branch: "$branch", $state_filter) {
      edges {
        node {
          commit
          branch
          state
        }
      }
    }
  }
}
EOF
)

  >&2 echo "--- Sending GraphQL query to fetch last commit with state: ${state:-default fallback}"
  >&2 echo "$query"

  local response=$(curl -sS -X POST https://graphql.buildkite.com/v1 \
    -H "Authorization: Bearer $token" \
    -H "Content-Type: application/json" \
    -d "$(jq -n --arg q "$query" '{query: $q}')")

  >&2 echo "--- Raw response from Buildkite GraphQL (commit query):"
  >&2 echo "$response" | jq .

  echo "$response" | jq -r '.data.pipeline.builds.edges[0].node.commit // empty'
}

ORGANIZATION="${BUILDKITE_PLUGIN_LAST_SUCCESSFUL_COMMITS_ORGANIZATION:-}"
PIPELINE="${BUILDKITE_PLUGIN_LAST_SUCCESSFUL_COMMITS_PIPELINE:-}"
BRANCH="${BUILDKITE_PLUGIN_LAST_SUCCESSFUL_COMMITS_BRANCH:-main}"
STATE="${BUILDKITE_PLUGIN_LAST_SUCCESSFUL_COMMITS_STATE:-}"
FROM_COMMIT="${BUILDKITE_PLUGIN_LAST_SUCCESSFUL_COMMITS_FROM:-}"
TO_COMMIT="${BUILDKITE_PLUGIN_LAST_SUCCESSFUL_COMMITS_TO:-}"

if [[ -z "$TO_COMMIT" ]]; then
  TO_COMMIT="$(git rev-parse HEAD)"
fi

API_TOKEN=""
if [[ -z "$FROM_COMMIT" ]]; then
  echo "--- Retrieving API token from Buildkite secrets"
  API_TOKEN="$(buildkite-agent secret get changes_api_token || true)"
  if [[ -z "$API_TOKEN" ]]; then
    echo "ðŸš¨ API token required unless 'from' commit is provided"
    exit 1
  fi
fi

if [[ -z "$FROM_COMMIT" ]]; then
  echo "--- Fetching last commit for $BRANCH (state: ${STATE:-default})"
  FROM_COMMIT=$(get_last_commit_from_buildkite "$ORGANIZATION" "$PIPELINE" "$BRANCH" "$STATE" "$API_TOKEN")
fi

echo "--- Comparing commits"
echo "    From: $FROM_COMMIT"
echo "    To:   $TO_COMMIT"

if [[ -n "$FROM_COMMIT" && "$FROM_COMMIT" == "$TO_COMMIT" ]]; then
  echo "âœ… No new commits. Skipping build."
  buildkite-agent annotate "ðŸŸ¢ No new commits since last successful build on \`$BRANCH\`. Skipping the rest of the build." --style "info"
  buildkite-agent pipeline upload <<YAML
steps: []
YAML
  exit 0
fi

# Export for use in command hook
echo "export FROM_COMMIT=$FROM_COMMIT" >> "$BUILDKITE_ENV_FILE"
echo "export TO_COMMIT=$TO_COMMIT" >> "$BUILDKITE_ENV_FILE"
